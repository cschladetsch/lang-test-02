	
fun fact(n)
	if n == 0 || n == 1
		return 1
	return mul(n, fact(n - 1)...)

fun mul(a,b)
	return a*b


// define a component.
// components are added to objects
comp Foo
	a = 1
	fun Add(n)
		return a + n

comp Bar
	b = 2
	fun Add(n)
		return Foo.Add(n) + b

// components can take arguments, like templates
comp Grok(ty)
	c = "grok"
	x = new ty(c.Size())

// define a class, which can have a set of components
class Base : Foo
	
// another class, which derives from Base class


// and also adds two components Bar and Grok
class Spam : Base, Bar, Grok(Signed32)
	this(n)
		Bar.b = n
		Foo.a = n

b = new [Bar, Foo]
assert b.Add(2) == 5

c = new Spam[Grok](3)
d = new Spam(3)	

fun fact(n)
	if n == 0 || n == 1
		return 1
	return mul(n, fact(n - 1))

num = 42
msg = "Hello, world"

fun hello()
	Print(msg)
	Print(num)

fun mul(a, b)
	return a*b

fun outer()
	fun inner(a)
		return a + 2
	s = [1,2,3]
	t = []
	for e in s
		t += inner(e)
	Assert(t == [3,4,5])

fun useGen()
	fun gen(n)
		while n > 0
			yield --n
	r = []
	for g in gen(3)
		r += g
	Assert(r == [2,1,0])
	
fun a(n)
	out << n
	if n-- > 0
		b(n-1)...	// the ... syntax means to not push current context before calling new

fun b(n)
	out << "In b, n=" << n
	a(n)...
	out << "Never get here!"

fun main()
	hello()
	Assert(fact(3) == 3*2*1)
	useGen()
	b(3)		